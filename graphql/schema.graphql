type Loopmaker {
  id: ID
  name: String
}

type LoopPack {
  id: ID!
  title: String!
  releaseDate: AWSDateTime
  url: String
  slug: String!
  imageUrl: String
  loopmaker: [Loopmaker]
}

type Song {
  id: ID!
  title: String!
  url: String!
  loopStartTimeSeconds: Int!
  isActive: Boolean!
  slug: String!
  isFeatured: Boolean!
  artist: [Artist]
  album: Album
  loop: [Loop]
  platform: Platform
}

type Platform {
  id: ID
  name: String
  trackId: String
}

type Loop {
  id: ID
  title: String
  url: String
  releaseDate: String
  isActive: Boolean
  slug: String
  loopmaker: [Loopmaker]
  platform: Platform
}

type Artist {
  id: ID!
  name: String!
  viewCount: Int
  slug: String!
  photo: Image?
}

type Album {
  id: String
  title: String
  url: String
  artwork: Image
}

type Image {
  id: String
  title: String
  url: String
}

type Like {
  id: ID!
  userId: String!
  itemId: String!
  createdAt: AWSDateTime
}

type isLiked {
  isLiked: Boolean!
}

type UserProfile {
  id: ID!
  authId: String!
  name: String!
  slug: String!
  photo: Image
  bio: String
  attributes: [Attribute]
}

type Attribute {
  id: ID!
  name: String
}

input LikeInput {
  id: ID!
  userId: String!
  itemId: String!
  createdAt: AWSDateTime
}

input UpdateLikeInput {
  id: ID!
  userId: String!
  itemId: String!
}

type Query {
  listLikes(userId: String!): [Song]
  getLikeById(userId: String!, itemId: String!): isLiked
  listSongs: [Song]
  getSongById(songId: String!): Song
  listArtists: [Artist]
  listLoopPacks: [LoopPack]
  getUserProfileById: UserProfile
  querySongByArtist(artistSlug: String!, songSlug: String!): Song
}

type Mutation {
  createLike(like: LikeInput!): Like
  deleteLike(userId: String!, itemId: String!): String
  updateLike(like: UpdateLikeInput!): Like
}
