type Producer @aws_api_key {
  id: ID
  name: String
}

type Loopmaker @aws_api_key {
  id: ID
  name: String
  slug: String
}

type LoopPack @aws_api_key {
  id: ID!
  title: String!
  releaseDate: AWSDateTime
  url: String
  slug: String!
  imageUrl: String
  loopmaker: [Loopmaker]
}

type Song @aws_api_key {
  id: ID!
  title: String!
  url: String!
  loopStartTimeSeconds: Int!
  isActive: Boolean!
  slug: String!
  isFeatured: Boolean!
  artist: [Artist]
  album: Album
  loop: [Loop]
  platform: Platform
  producer: [Producer]
  likesCount: Int
  isLiked: Boolean
}

type Genre {
  id: ID
  name: String!
  slug: String!
  coverImage: Image
}

type Platform @aws_api_key {
  id: ID
  name: String
  trackId: String
}

type Loop @aws_api_key {
  id: ID
  title: String
  url: String
  releaseDate: String
  isActive: Boolean
  slug: String
  loopmaker: [Loopmaker]
  platform: Platform
  loopPack: LoopPack
}

type Artist @aws_api_key {
  id: ID!
  name: String!
  viewCount: Int
  slug: String!
  photo: Image?
}

type Album @aws_api_key {
  id: String
  title: String
  url: String
  artwork: Image
}

type Image @aws_api_key {
  id: String
  title: String
  url: String
}

type Like @aws_api_key {
  id: ID!
  userId: String!
  itemId: String!
  createdAt: AWSDateTime
}

type isLiked @aws_api_key {
  isLiked: Boolean!
}

type UserProfile @aws_api_key {
  id: ID!
  authId: String!
  name: String!
  slug: String!
  photo: Image
  bio: String
  attributes: [Attribute]
}

type Attribute @aws_api_key {
  id: ID!
  name: String
}

input LikeInput @aws_api_key {
  id: ID!
  userId: String!
  itemId: String!
  createdAt: AWSDateTime
}

input UpdateLikeInput @aws_api_key {
  id: ID!
  userId: String!
  itemId: String!
}

type Submission {
  id: ID!
  userId: ID!
  artist: String!
  songTitle: String!
  albumTitle: String
  linkToSong: String
  loopmaker: String
  loopTitle: String
  loopPackTitle: String
  linkToLoop: String
  comments: String
}

input SubmissionInput {
  id: ID!
  userId: ID!
  artist: String!
  songTitle: String!
  albumTitle: String
  linkToSong: String
  loopmaker: String
  loopTitle: String
  loopPackTitle: String
  linkToLoop: String
  comments: String
}

input UpdateSubmissionInput {
  id: ID!
  artist: String!
  songTitle: String!
  albumTitle: String
  linkToSong: String
  loopmaker: String
  loopTitle: String
  loopPackTitle: String
  linkToLoop: String
  Comments: String
}


type Query {
  listLikes(userId: String!): [Song] @aws_api_key
  getLikeById(userId: String!, itemId: String!): isLiked @aws_api_key
  listSongs: [Song] @aws_api_key
  getSongById(userId: String!, songId: String!): Song @aws_api_key
  listArtists: [Artist] @aws_api_key
  listLoopPacks: [LoopPack] @aws_api_key
  getUserProfileById: UserProfile @aws_api_key
  querySongByArtist(artistSlug: String!, songSlug: String!): Song @aws_api_key
  listGenres: [Genre]
  listSubmissions(userId: String!): [Submission]
  getSubmissionById(submissionId: String!): Submission
}

type Mutation {
  createLike(like: LikeInput!): Like @aws_api_key
  deleteLike(userId: String!, itemId: String!): String @aws_api_key
  updateLike(like: UpdateLikeInput!): Like @aws_api_key
  createSubmission(submission: SubmissionInput!): Submission
  deleteSubmission(submissionId: String!): String
  updateSubmission(submission: UpdateSubmissionInput!): Submission
}
